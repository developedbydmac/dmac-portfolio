name: 🚀 Deploy D Mac Portfolio to AWS

on:
  push:
    branches: [ main, master ]
    paths: 
      - '**.html'
      - '**.css' 
      - '**.js'
      - 'assets/**'
      - 'devops/aws/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'devops/aws/**'
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Validate HTML files
      run: |
        echo "🔍 Validating HTML structure..."
        
        # Check if required files exist
        required_files=("index.html" "resume.html" "projects.html" "blog.html")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required file $file is missing"
            exit 1
          else
            echo "✅ Found $file"
          fi
        done
        
        # Basic HTML validation
        for html_file in *.html; do
          if [ -f "$html_file" ]; then
            echo "📄 Checking $html_file..."
            
            # Check for DOCTYPE
            if ! grep -q "<!DOCTYPE" "$html_file"; then
              echo "⚠️  Warning: $html_file is missing DOCTYPE declaration"
            fi
            
            # Check for basic HTML structure
            if ! grep -q "<html" "$html_file"; then
              echo "❌ Error: $html_file is missing <html> tag"
              exit 1
            fi
            
            if ! grep -q "<head>" "$html_file"; then
              echo "❌ Error: $html_file is missing <head> section"
              exit 1
            fi
            
            if ! grep -q "<body>" "$html_file"; then
              echo "❌ Error: $html_file is missing <body> section"
              exit 1
            fi
            
            echo "✅ $html_file structure looks good"
          fi
        done
        
    - name: 🎨 Check CSS files
      run: |
        echo "🎨 Checking CSS files..."
        if [ -f "styles/main.css" ]; then
          echo "✅ Found main CSS file"
          # Basic CSS validation - check for syntax errors
          if grep -q "{" styles/main.css && grep -q "}" styles/main.css; then
            echo "✅ CSS file appears to have valid syntax"
          else
            echo "⚠️  Warning: CSS file might have syntax issues"
          fi
        else
          echo "⚠️  Warning: No main CSS file found"
        fi
        
    - name: 📊 Check assets
      run: |
        echo "📊 Checking assets..."
        if [ -d "assets" ]; then
          echo "✅ Assets directory found"
          echo "📁 Assets found:"
          find assets -type f | head -10
        else
          echo "⚠️  Warning: No assets directory found"
        fi
        
    - name: 🧪 Run custom build script
      run: |
        if [ -f "build.sh" ]; then
          echo "🧪 Running custom build script..."
          chmod +x build.sh
          ./build.sh
        else
          echo "ℹ️  No custom build script found, skipping..."
        fi
        
    - name: 📦 Create deployment package
      run: |
        echo "📦 Creating deployment package..."
        
        # Create a clean build directory
        mkdir -p build
        
        # Copy all necessary files
        cp *.html build/ 2>/dev/null || echo "No HTML files in root"
        
        # Copy directories
        [ -d "assets" ] && cp -r assets build/
        [ -d "styles" ] && cp -r styles build/
        [ -d "scripts" ] && cp -r scripts build/
        [ -d "components" ] && cp -r components build/
        [ -d "experience" ] && cp -r experience build/
        
        # Create a simple 404 page if it doesn't exist
        if [ ! -f "build/404.html" ]; then
          cat > build/404.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>404 - Page Not Found | D Mac Portfolio</title>
          <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            h1 { color: #333; }
            a { color: #007bff; text-decoration: none; }
            a:hover { text-decoration: underline; }
          </style>
        </head>
        <body>
          <h1>404 - Page Not Found</h1>
          <p>The page you're looking for doesn't exist.</p>
          <a href="/">← Back to Home</a>
        </body>
        </html>
        EOF
        fi
        
        # Create AWS-specific content
        cat > build/aws-info.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>AWS Deployment Info | D Mac Portfolio</title>
          <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: linear-gradient(135deg, #232f3e, #ff9900); color: white; }
            .container { max-width: 600px; margin: 0 auto; }
            h1 { color: #fff; margin-bottom: 30px; }
            .aws-badge { background: rgba(255,255,255,0.2); padding: 20px; border-radius: 10px; margin: 20px 0; }
            a { color: #fff; text-decoration: none; font-weight: bold; }
            a:hover { text-decoration: underline; }
          </style>
        </head>
        <body>
          <div class="container">
            <h1>🔶 AWS Deployment</h1>
            <div class="aws-badge">
              <h3>Powered by Amazon Web Services</h3>
              <p>This portfolio is built on AWS's enterprise-grade infrastructure for maximum reliability and performance.</p>
              <p><strong>Features:</strong></p>
              <ul style="text-align: left;">
                <li>S3 Static Website Hosting with versioning</li>
                <li>CloudFront CDN with global edge locations</li>
                <li>Route53 DNS with health checks</li>
                <li>99.99% uptime SLA</li>
                <li>Auto-scaling and enterprise security</li>
              </ul>
            </div>
            <a href="/">← Back to Portfolio</a>
          </div>
        </body>
        </html>
        EOF
        
        echo "✅ Build package created"
        echo "📁 Build contents:"
        ls -la build/
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: portfolio-build
        path: build/
        retention-days: 7

  # Job 2: Deploy to AWS (only on main/master branch)
  deploy:
    name: 🚀 Deploy to AWS
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: portfolio-build
        path: build/
        
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 📤 Deploy to S3
      run: |
        echo "📤 Deploying to S3 bucket: $S3_BUCKET"
        
        # Sync files to S3 with proper content types and caching
        aws s3 sync build/ s3://$S3_BUCKET/ \
          --delete \
          --cache-control "public, max-age=3600" \
          --metadata-directive REPLACE
          
        # Set longer cache for static assets
        if [ -d "build/assets" ]; then
          aws s3 sync build/assets/ s3://$S3_BUCKET/assets/ \
            --cache-control "public, max-age=31536000" \
            --metadata-directive REPLACE
        fi
        
        # Set shorter cache for HTML files
        aws s3 sync build/ s3://$S3_BUCKET/ \
          --exclude "*" \
          --include "*.html" \
          --cache-control "public, max-age=300" \
          --metadata-directive REPLACE
          
        echo "✅ S3 deployment completed"
        
    - name: 🔄 Invalidate CloudFront cache
      run: |
        echo "🔄 Invalidating CloudFront cache..."
        
        invalidation_id=$(aws cloudfront create-invalidation \
          --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
          --paths "/*" \
          --query 'Invalidation.Id' \
          --output text)
          
        echo "✅ CloudFront invalidation created: $invalidation_id"
        echo "🕐 Cache invalidation may take 5-15 minutes to complete"
        
    - name: 🌐 Get website URL
      run: |
        echo "🌐 Deployment completed successfully!"
        
        # Get CloudFront distribution domain
        distribution_domain=$(aws cloudfront get-distribution \
          --id $CLOUDFRONT_DISTRIBUTION_ID \
          --query 'Distribution.DomainName' \
          --output text)
          
        echo "🚀 Your portfolio is now live at:"
        echo "   https://$distribution_domain"
        
        # If using a custom domain, that would be displayed too
        echo ""
        echo "✨ D Mac Portfolio deployment complete! ✨"

  # Job 3: Lighthouse Performance Check (optional)
  lighthouse:
    name: 🔍 Lighthouse Performance Check
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🌐 Get website URL
      id: get-url
      run: |
        distribution_domain=$(aws cloudfront get-distribution \
          --id $CLOUDFRONT_DISTRIBUTION_ID \
          --query 'Distribution.DomainName' \
          --output text)
        echo "website_url=https://$distribution_domain" >> $GITHUB_OUTPUT
        
    - name: 🔍 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ steps.get-url.outputs.website_url }}
        budgetPath: .lighthousebudget.json
        uploadArtifacts: true
        temporaryPublicStorage: true
